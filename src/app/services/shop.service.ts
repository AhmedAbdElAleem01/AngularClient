/**
 * OpenAPI definition
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
}       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../api/encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CategoryDTO } from '../model/categoryDTO';
// @ts-ignore
import { PageProductDTO } from '../model/pageProductDTO';
// @ts-ignore
import { ProductDTO } from '../model/productDTO';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../api/variables';
import { Configuration }                                     from '../api/configuration';
import { BaseService } from '../api/api.base.service';



@Injectable({
  providedIn: 'root'
})
export class ShopService extends BaseService {

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
    super(basePath, configuration);
  }

  /**
   * @param categoryId
   * @param minPrice
   * @param maxPrice
   * @param page
   * @param size
   * @param sort
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public filterProducts(categoryId?: number, minPrice?: number, maxPrice?: number, page?: number, size?: number, sort?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<PageProductDTO>;
  public filterProducts(categoryId?: number, minPrice?: number, maxPrice?: number, page?: number, size?: number, sort?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageProductDTO>>;
  public filterProducts(categoryId?: number, minPrice?: number, maxPrice?: number, page?: number, size?: number, sort?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageProductDTO>>;
  public filterProducts(categoryId?: number, minPrice?: number, maxPrice?: number, page?: number, size?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>categoryId, 'categoryId');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>minPrice, 'minPrice');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>maxPrice, 'maxPrice');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>page, 'page');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>size, 'size');
    localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
      <any>sort, 'sort');

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      '*/*'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';

    let localVarPath = `/products/filter`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<PageProductDTO>('get', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllCategories(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<Array<CategoryDTO>>;
  public getAllCategories(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<CategoryDTO>>>;
  public getAllCategories(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<CategoryDTO>>>;
  public getAllCategories(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      '*/*'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';


    let localVarPath = `/categories`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Array<CategoryDTO>>('get', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllProducts(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<Array<ProductDTO>>;
  public getAllProducts(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<ProductDTO>>>;
  public getAllProducts(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<ProductDTO>>>;
  public getAllProducts(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
      '*/*'
    ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;


    let responseType_: 'text' | 'json' | 'blob' = 'json';

    let localVarPath = `/products`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Array<ProductDTO>>('get', `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

}
